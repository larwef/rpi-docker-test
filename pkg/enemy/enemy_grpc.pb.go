// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package enemy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// EnemyServiceClient is the client API for EnemyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnemyServiceClient interface {
	AddEnemy(ctx context.Context, in *AddEnemyRequest, opts ...grpc.CallOption) (*AddEnemyResponse, error)
	GetEnemy(ctx context.Context, in *GetEnemyRequest, opts ...grpc.CallOption) (*GetEnemyResponse, error)
	UpdateEnemy(ctx context.Context, in *UpdateEnemyRequest, opts ...grpc.CallOption) (*UpdateEnemyResponse, error)
	ListEnemies(ctx context.Context, in *ListEnemiesRequest, opts ...grpc.CallOption) (*ListEnemiesResponse, error)
}

type enemyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEnemyServiceClient(cc grpc.ClientConnInterface) EnemyServiceClient {
	return &enemyServiceClient{cc}
}

func (c *enemyServiceClient) AddEnemy(ctx context.Context, in *AddEnemyRequest, opts ...grpc.CallOption) (*AddEnemyResponse, error) {
	out := new(AddEnemyResponse)
	err := c.cc.Invoke(ctx, "/enemy.EnemyService/AddEnemy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enemyServiceClient) GetEnemy(ctx context.Context, in *GetEnemyRequest, opts ...grpc.CallOption) (*GetEnemyResponse, error) {
	out := new(GetEnemyResponse)
	err := c.cc.Invoke(ctx, "/enemy.EnemyService/GetEnemy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enemyServiceClient) UpdateEnemy(ctx context.Context, in *UpdateEnemyRequest, opts ...grpc.CallOption) (*UpdateEnemyResponse, error) {
	out := new(UpdateEnemyResponse)
	err := c.cc.Invoke(ctx, "/enemy.EnemyService/UpdateEnemy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enemyServiceClient) ListEnemies(ctx context.Context, in *ListEnemiesRequest, opts ...grpc.CallOption) (*ListEnemiesResponse, error) {
	out := new(ListEnemiesResponse)
	err := c.cc.Invoke(ctx, "/enemy.EnemyService/ListEnemies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnemyServiceServer is the server API for EnemyService service.
// All implementations must embed UnimplementedEnemyServiceServer
// for forward compatibility
type EnemyServiceServer interface {
	AddEnemy(context.Context, *AddEnemyRequest) (*AddEnemyResponse, error)
	GetEnemy(context.Context, *GetEnemyRequest) (*GetEnemyResponse, error)
	UpdateEnemy(context.Context, *UpdateEnemyRequest) (*UpdateEnemyResponse, error)
	ListEnemies(context.Context, *ListEnemiesRequest) (*ListEnemiesResponse, error)
	mustEmbedUnimplementedEnemyServiceServer()
}

// UnimplementedEnemyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEnemyServiceServer struct {
}

func (UnimplementedEnemyServiceServer) AddEnemy(context.Context, *AddEnemyRequest) (*AddEnemyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEnemy not implemented")
}
func (UnimplementedEnemyServiceServer) GetEnemy(context.Context, *GetEnemyRequest) (*GetEnemyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnemy not implemented")
}
func (UnimplementedEnemyServiceServer) UpdateEnemy(context.Context, *UpdateEnemyRequest) (*UpdateEnemyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEnemy not implemented")
}
func (UnimplementedEnemyServiceServer) ListEnemies(context.Context, *ListEnemiesRequest) (*ListEnemiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEnemies not implemented")
}
func (UnimplementedEnemyServiceServer) mustEmbedUnimplementedEnemyServiceServer() {}

// UnsafeEnemyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnemyServiceServer will
// result in compilation errors.
type UnsafeEnemyServiceServer interface {
	mustEmbedUnimplementedEnemyServiceServer()
}

func RegisterEnemyServiceServer(s *grpc.Server, srv EnemyServiceServer) {
	s.RegisterService(&_EnemyService_serviceDesc, srv)
}

func _EnemyService_AddEnemy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEnemyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnemyServiceServer).AddEnemy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enemy.EnemyService/AddEnemy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnemyServiceServer).AddEnemy(ctx, req.(*AddEnemyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnemyService_GetEnemy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEnemyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnemyServiceServer).GetEnemy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enemy.EnemyService/GetEnemy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnemyServiceServer).GetEnemy(ctx, req.(*GetEnemyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnemyService_UpdateEnemy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEnemyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnemyServiceServer).UpdateEnemy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enemy.EnemyService/UpdateEnemy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnemyServiceServer).UpdateEnemy(ctx, req.(*UpdateEnemyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnemyService_ListEnemies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEnemiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnemyServiceServer).ListEnemies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enemy.EnemyService/ListEnemies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnemyServiceServer).ListEnemies(ctx, req.(*ListEnemiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EnemyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "enemy.EnemyService",
	HandlerType: (*EnemyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddEnemy",
			Handler:    _EnemyService_AddEnemy_Handler,
		},
		{
			MethodName: "GetEnemy",
			Handler:    _EnemyService_GetEnemy_Handler,
		},
		{
			MethodName: "UpdateEnemy",
			Handler:    _EnemyService_UpdateEnemy_Handler,
		},
		{
			MethodName: "ListEnemies",
			Handler:    _EnemyService_ListEnemies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/enemy/enemy.proto",
}
