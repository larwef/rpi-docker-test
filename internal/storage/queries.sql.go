// Code generated by sqlc. DO NOT EDIT.
// source: queries.sql

package storage

import (
	"context"
	"time"
)

const addEnemy = `-- name: AddEnemy :one
INSERT INTO enemies (enemy_id, full_name, email, rating, last_updated)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, enemy_id, full_name, email, rating, last_updated
`

type AddEnemyParams struct {
	EnemyID     string    `json:"enemy_id"`
	FullName    string    `json:"full_name"`
	Email       string    `json:"email"`
	Rating      float32   `json:"rating"`
	LastUpdated time.Time `json:"last_updated"`
}

func (q *Queries) AddEnemy(ctx context.Context, arg AddEnemyParams) (Enemy, error) {
	row := q.db.QueryRowContext(ctx, addEnemy,
		arg.EnemyID,
		arg.FullName,
		arg.Email,
		arg.Rating,
		arg.LastUpdated,
	)
	var i Enemy
	err := row.Scan(
		&i.ID,
		&i.EnemyID,
		&i.FullName,
		&i.Email,
		&i.Rating,
		&i.LastUpdated,
	)
	return i, err
}

const getEnemy = `-- name: GetEnemy :one
SELECT id, enemy_id, full_name, email, rating, last_updated FROM enemies
WHERE enemy_id = $1
`

func (q *Queries) GetEnemy(ctx context.Context, enemyID string) (Enemy, error) {
	row := q.db.QueryRowContext(ctx, getEnemy, enemyID)
	var i Enemy
	err := row.Scan(
		&i.ID,
		&i.EnemyID,
		&i.FullName,
		&i.Email,
		&i.Rating,
		&i.LastUpdated,
	)
	return i, err
}

const listEnemies = `-- name: ListEnemies :many
SELECT id, enemy_id, full_name, email, rating, last_updated FROM enemies
`

func (q *Queries) ListEnemies(ctx context.Context) ([]Enemy, error) {
	rows, err := q.db.QueryContext(ctx, listEnemies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Enemy
	for rows.Next() {
		var i Enemy
		if err := rows.Scan(
			&i.ID,
			&i.EnemyID,
			&i.FullName,
			&i.Email,
			&i.Rating,
			&i.LastUpdated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEnemy = `-- name: UpdateEnemy :one
UPDATE enemies
SET
    full_name = COALESCE(NULLIF($1::text, ''), full_name),
    email = COALESCE(NULLIF($2::text, ''), email),
    rating = COALESCE(NULLIF($3::real, 0.0), rating),
    last_updated = $4::timestamp
WHERE enemy_id = $5::text
RETURNING id, enemy_id, full_name, email, rating, last_updated
`

type UpdateEnemyParams struct {
	FullName    string    `json:"full_name"`
	Email       string    `json:"email"`
	Rating      float32   `json:"rating"`
	LastUpdated time.Time `json:"last_updated"`
	EnemyID     string    `json:"enemy_id"`
}

func (q *Queries) UpdateEnemy(ctx context.Context, arg UpdateEnemyParams) (Enemy, error) {
	row := q.db.QueryRowContext(ctx, updateEnemy,
		arg.FullName,
		arg.Email,
		arg.Rating,
		arg.LastUpdated,
		arg.EnemyID,
	)
	var i Enemy
	err := row.Scan(
		&i.ID,
		&i.EnemyID,
		&i.FullName,
		&i.Email,
		&i.Rating,
		&i.LastUpdated,
	)
	return i, err
}
